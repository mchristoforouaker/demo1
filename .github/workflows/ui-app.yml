# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: UI App

on:
  workflow_call:

#  push:
#    branches: [ "main" ]
#    paths:
#      - 'ui/vite-ui-app/**'
#  pull_request:
#    branches: [ "main" ]

jobs:
  changes:
    runs-on: ubuntu-latest

    # Set job outputs to values from filter step
    outputs:
      ui-app: ${{ steps.filter.outputs.ui-app }}

    steps:
    # Don't need full checkout here, only level 1
    - uses: actions/checkout@v4
    - run: ls -al
    - run: ls -al .github/workflows

    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          ui-app:
            - 'ui/vite-ui-app/**'

    - name: Show vars
      run: |
        echo "UI App changed: ${{ vars.DOCKER_DIR }}"

  containerise:
    runs-on: 	ubuntu-latest
    steps:
    - name: Update
      run: |
        sudo apt-get update && sudo apt-get install -y
        docker --version

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Base Image
      run: |
        docker build -t ui-app-build -f ${{ vars.DOCKER_DIR }}ui-app-build.dockerfile ./ui/vite-ui-app

    - name: Build Packaged Image
      run: |
        # NOTE: Context is not important here as all files are in the image from the previous step
        docker build -t ui-app-package -f ${{ vars.DOCKER_DIR }}ui-app-package.dockerfile .

    - name: Build Runtime Image
      run: |
        # NOTE: Context is not important here as all files are in the image from the previous step
        docker build -t ui-app-runtime -f ${{ vars.DOCKER_DIR }}ui-app-package.dockerfile .

    # - name: Push Image to GHCR
    #   run: |
    #     docker images
    #     echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login ghcr.io -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
    #     docker image tag ui-app-runtime:latest ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/ui-app-runtime:${{github.run_number}}
    #     docker push ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/ui-app-runtime:${{github.run_number}}
    #     #docker logout

    - name: Push Image to ECR
      run: |
        docker images
        docker image tag ui-app-runtime:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nsap/ui-app-runtime:${{github.run_number}}
        docker images
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} 
        aws ecr get-login-password --region ${{ secrets.AWS_REGION  }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nsap/ui-app-runtime:${{github.run_number}}
    # - name: Build
    #   uses: docker/build-push-action@v4
    #   with:
    #     context: ./ui/vite-ui-app
    #     push: false
    #     tags: my-ui-app:latest

  # build:
  #   needs: changes
  #   # if: ${{ needs.changes.outputs.ui-app == 'true' }}
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./ui/vite-ui-app

  #   strategy:
  #     matrix:
  #       node-version: [22.x]
  #       # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v4
  #     with:
  #       cache-dependency-path: '**/ui/vite-ui-app/package-lock.json'
  #       node-version: ${{ matrix.node-version }}
  #       cache: 'npm'
  #   - run: ls -al
  #   - run: npm ci
  #   - run: npm run build --if-present
  #   #- run: npm test

  # lint:
  #   needs: changes
  #   if: ${{ needs.changes.outputs.ui-app == 'true' }}
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./ui/vite-ui-app

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v4
  #     with:
  #       cache-dependency-path: '**/ui/vite-ui-app/package-lock.json'
  #       node-version: ${{ matrix.node-version }}
  #       cache: 'npm'
  #   - run: ls -al
  #   - run: npm ci
  #   - run: npm run lint --if-present
